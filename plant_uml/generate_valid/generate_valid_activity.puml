@startuml generate_activity
start
!include style_macros.puml

!procedure $InputValidation($arg)
:User requires a new puzzle with a specific length 'n',
the desired complexity 'c'
and an indication on whether is has to be randomly generated or not;
:'n' and 'c' get validated;
if (n or c invalid?) is (yes) then
end
endif
!endprocedure

!procedure $GenerateSolution($arg)
:Hierholzer gets applied to retrieve an eulerian cycle;
:A sequence is generated from the eulerian cycle;
!endprocedure

!procedure $GenerateValidMaxComplexityPuzzle($arg)
:All the Hamiltonian cycles get computed over the tournament;
:According to n, (n-1)/2 cycles will be selected;
while ((n-1)/2 Hamiltonian cycles have not been processed?) is (no)
:Select a Hamiltonian cycle that has not been processed;
:Reinsert **one tile** from the selected cycle at its original position;
:Mark the cycle as processed to exclude it from future selections;
endwhile
:Reinsert the double tiles;
!endprocedure

!procedure $RefinePuzzle($arg)
repeat
:Reinsert a single tile;
:Compute complexity;
repeat while(Is the complexity of the puzzle equal to the desired complexity?) is (no)
!endprocedure

$StyledRectangle("InputValidation","lightblue","1","Here input gets validated")
:A regular graph from 'n' gets built;
$StyledRectangle("GenerateSolution","lightcoral","1","Here solution gets generated")
:A tournament graph gets generated from the sequence;
$StyledRectangle("GenerateValidMaxComplexityPuzzle","lightgreen","1","Here puzzle gets generated")
$StyledRectangle("RefinePuzzle","coral","1","The puzzle gets reinsertions until the complexity desired is matched")
end

@enduml

