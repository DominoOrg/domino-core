@startuml generate_activity
start

:User requires a new puzzle with a specific length 'n',
the desired complexity 'c'
and an indication on whether is has to be randomly generated or not;

:A regular graph from 'n' gets built;

:Hierholzer gets applied to retrieve an eulerian cycle;

:The vector of removed tiles is initialized to the tiles of the generated sequence;
:A flag for validity of the puzzle is set to false;
:The current complexity is set to the maximum value of the scale 3;

repeat
    if (The number of removed tiles is equal to the length of the solution?) is (yes) then
      :A random position gets choosen;
    else (no)
      :A position adjacent to the right of an existing tile is choosen;
    endif
    :The tile at the choosen position gets reinserted;
    :The removed tiles vector is updated;
    :The validity of the updated puzzle is checked using the validate activity;
    :The current complexity is updated using the classify activity;
repeat while (The current complexity is equal to the desired complexity and the puzzle is valid?) is (no) not (yes)
end
@enduml

